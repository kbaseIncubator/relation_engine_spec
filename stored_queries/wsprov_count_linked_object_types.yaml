# Fetch the counts by type of ws_objects that reference an object
# Note: If both show_private and show_public are true, this will be treated as an OR
name: wsprov_count_linked_object_types
params:
  type: object
  required: [obj_key, type]
  properties:
    obj_key:
      type: string
      description: Key of the wsprov_object to search on
    show_private:
      type: boolean
      description: limit to objects in workspaces that a user has access to
      default: true
    show_public:
      type: boolean
      description: limit to objects in public workspaces
      default: true
    type:
      type: string
      description: WS type to filter on
    owners:
      default: null
      description: Array of usernames to filter by owner
      anyOf:
        - {type: "null"}
        - type: array
          items:
            type: string
query: |
  WITH wsprov_object
  LET obj_id = concat('wsprov_object/', @obj_key)

  let out = (
      for v, e, p in 1..100
          OUTBOUND obj_id wsprov_links, wsprov_copied_into
          OPTIONS {bfs: true, uniqueVertices: 'global'}
          FILTER (!@type || v.ws_type == @type)
          FILTER (!@owners || v.owner IN @owners)
          FILTER (@show_private && @show_public)
            ? (v.is_public || v.workspace_id IN ws_ids)
            : (!@show_private || v.workspace_id IN ws_ids) && (!@show_public || v.is_public)
          COLLECT type = v.ws_type with count into type_count
          RETURN {type, type_count}
  )

  let inb = (
      for v, e, p in 1..100
          INBOUND obj_id wsprov_links, wsprov_copied_into
          OPTIONS {bfs: true, uniqueVertices: 'global'}
          FILTER (!@type || v.ws_type == @type)
          FILTER (!@owners || v.owner IN @owners)
          FILTER (@show_private && @show_public)
            ? (v.is_public || v.workspace_id IN ws_ids)
            : (!@show_private || v.workspace_id IN ws_ids) && (!@show_public || v.is_public)
          COLLECT type = v.ws_type with count into type_count
          RETURN {type, type_count}
  )

  return {out, inb}
